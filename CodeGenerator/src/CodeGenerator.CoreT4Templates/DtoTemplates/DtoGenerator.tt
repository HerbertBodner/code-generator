<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>


<#@ assembly name="$(SolutionDir)artifacts\bin\CodeGenerator.Core\Debug\dnx451\CodeGenerator.Core.dll" #>
<#@ import namespace="CodeGenerator.Core.Services" #>

<#
	var fileProperties = new FileProperties()
	{
		BuildAction = BuildAction.Compile
	};
	var manager = TemplateFileManager.Create(this);
	manager.IsAutoIndentEnabled = false;


	var sourcePath = @"C:\_Projects\code-generator\CodeGenerator\artifacts\bin\CodeGenerator.Core.SampleModel\Debug\dnx451";
	var projectName = @"CodeGenerator.Core.SampleModel";
	
	var absPathDll = System.IO.Path.Combine(sourcePath, projectName + ".dll");

	var entityReaderService = new EntityReaderService();
	var entities = entityReaderService.GetAllClasses(absPathDll, new[] { projectName + ".Entities" }).ToList();


	var x = this.Host.ResolvePath(System.IO.Path.GetFullPath(System.IO.Path.Combine(@"..\", projectName, @"bin\debug", projectName + ".dll")));
	Write(x);

	foreach(var entity in entities)
    {
		manager.StartNewFile(entity.ClassName + "DtoBase.cs", folderName:@"TestFolder");
		// use projectName to generate output in a different visual studio project
		//manager.StartNewFile(type.ClassName + ".cs", /* projectName:"OtherProject", */ folderName:"TestFolder/Sub", fileProperties:fileProperties);
		
		
		
#>
using System;
using System.Collections.Generic;
using System.Linq;

namespace HerbiSoft.Core.SampleDtos.Dtos 
{
	/// <summary>
	/// Auto-Generated by DtoGenerator.tt - do not modify as changes will be overridden
	/// </summary>
	public class <#=entity.ClassName #>DtoBase
	{
<#
		this.PushIndent("        ");
		foreach(var prop in entity.Properties)
        {
			var propText = string.Format("public {0} {1} {{ get; set; }}", prop.GetTypeNameWithPostfix(entity.Namespace, "DtoBase"), prop.Name);
			this.WriteLine(propText);
		}
		
		this.PopIndent();
#>
	}
}

<#
}
	this.PopIndent();	
manager.Process();
manager.EndBlock();
#>